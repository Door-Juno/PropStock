# my_fullstack_app/docker-compose.yml
services:
  db: # PostgreSQL 데이터베이스 서비스
    image: postgres:13 # PostgreSQL 이미지 버전 (원하는 버전 선택)
    volumes:
      - pgdata:/var/lib/postgresql/data # 데이터를 영구적으로 저장할 볼륨 설정
    environment: # 환경 변수 설정 (Django settings.py와 일치해야 함)
      - POSTGRES_DB=${POSTGRES_DB}     # .env 파일에서 로드
      - POSTGRES_USER=${POSTGRES_USER}     # .env 파일에서 로드
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # .env 파일에서 로드
    ports:
      - "${DB_PORT:-5432}:5432" # 로컬 5432 포트와 컨테이너 5432 포트 연결 (기본값 5432)
    healthcheck: # DB 준비 상태 확인 (Django가 DB에 연결하기 전까지 기다리게 함)
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend: # Django 백엔드 서비스
    build: ./backend # backend 폴더의 Dockerfile을 사용하여 이미지 빌드
    command: python manage.py runserver 0.0.0.0:8000 # Django 개발 서버 실행 명령어
    volumes:
      - ./backend:/app # 로컬 backend 폴더를 컨테이너 /app에 마운트 (코드 변경 시 즉시 반영)
      - ai_data_volume:/app/ai/data # AI 데이터 공유 볼륨 마운트
    ports:
      - "${DJANGO_PORT:-8000}:8000" # 로컬 8000 포트와 컨테이너 8000 포트 연결 (기본값 8000)
    environment: # Django settings.py에 사용될 환경 변수
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db # DB 서비스 이름으로 호스트 지정 (Docker Compose 네트워크 내부에서)
      - POSTGRES_PORT=5432
    depends_on: # db 서비스와 ai_service가 완전히 시작된 후에 backend 서비스 시작
      db:
        condition: service_healthy # DB 서비스가 healthcheck를 통과해야 시작
      ai_service:
        condition: service_started # AI 서비스 컨테이너가 시작되면 됨

  frontend: # React 프론트엔드 서비스
    build: ./frontend # frontend 폴더의 Dockerfile을 사용하여 이미지 빌드
    command: npm start # React 개발 서버 실행 명령어
    volumes:
      - ./frontend:/app # 로컬 frontend 폴더를 컨테이너 /app에 마운트
      - /app/node_modules # node_modules는 호스트가 아닌 컨테이너 내부에 유지
    ports:
      - "${REACT_PORT:-3000}:3000" # 로컬 3000 포트와 컨테이너 3000 포트 연결 (기본값 3000)
    depends_on:
      - backend

  ai_service: # AI FastAPI 서비스
    build:
      context: ./ai # AI 서비스 Dockerfile이 있는 경로
      dockerfile: Dockerfile # AI 서비스 Dockerfile 이름
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --workers 1 # FastAPI 실행 명령어
    volumes:
      - ./ai:/app
      - ai_data_volume:/app/ai/data # AI 데이터 공유 볼륨 마운트
      - ai_models_volume:/app/models # AI 모델 저장용 볼륨
    ports:
      - "${AI_PORT:-8001}:8001" # 로컬 8001 포트와 컨테이너 8001 포트 연결 (기본값 8001)
    environment: # AI 서비스에 필요한 환경 변수
      - MODEL_PATH=${MODEL_PATH:-/app/models/inventory_model.pkl} # FastAPI main.py에서 사용할 모델 경로 (기본값 설정)
    depends_on:
      - db # AI 서비스가 DB에서 데이터를 직접 가져올 경우 DB에 의존

# 볼륨 정의 (데이터 영속성 유지를 위해)
volumes:
  pgdata: # PostgreSQL 데이터 저장용 볼륨
  ai_data_volume: # AI 데이터 공유용 볼륨